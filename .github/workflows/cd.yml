name: CD

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push data-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/data-service
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-data-service:latest
      - name: Build and push projection-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/projection-service
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-projection-service:latest
      - name: Build and push simulation-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/simulation-service
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-simulation-service:latest
      - name: Build and push optimization-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/optimization-service
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-optimization-service:latest
      - name: Build and push contest-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/contest-service
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-contest-service:latest
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nflt-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.repository_owner }}
      - name: Deploy to production
        run: echo "Deploying to production... (add your deployment steps here)" 